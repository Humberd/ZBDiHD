-- zad 1
-- naive
SELECT
  p.NAME,
  COUNT(*) AS foo
FROM PUBLISHER p
  JOIN BOOKS b ON b.PUBID = p.PUBID
GROUP BY p.NAME
ORDER BY foo;

-- proper
SELECT
  PUBID,
  COUNT(ISBN),
  DENSE_RANK()
  OVER (
    ORDER BY COUNT(ISBN) DESC ) AS RANKING
FROM BOOKS
GROUP BY PUBID;

-- zad 3
SELECT
  o.SHIPCITY,
  SUM(oi.QUANTITY),
  NTILE(15)
  OVER (
    ORDER BY SUM(oi.QUANTITY) DESC )
FROM ORDERS o
  JOIN ORDERITEMS oi ON o.ORDER# = oi.ORDER#
GROUP BY o.SHIPCITY;

-- zad 4
SELECT
  P.NAME,
  TO_CHAR(O.ORDERDATE, 'MM-YYYY')                                                                   AS CZAS,
  SUM(OI.QUANTITY * (B.RETAIL - B.COST))                                                            AS ZYSK,
  SUM(SUM(OI.QUANTITY * (B.RETAIL - B.COST)))
  OVER (
    PARTITION BY P.NAME --zamiast unbounded moze byc 1, 2,3,4 itp- -- and current row mozna  zamienic na preceeding---
    ORDER BY TO_CHAR(O.ORDERDATE, 'MM-YYYY') ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW ) AS SUMA_NARASTAJACA
FROM PUBLISHER P
  JOIN BOOKS B ON P.PUBID = B.PUBID
  JOIN ORDERITEMS OI ON B.ISBN = OI.ISBN
  JOIN ORDERS O ON OI.ORDER# = O.ORDER#
GROUP BY P.NAME, TO_CHAR(O.ORDERDATE, 'MM-YYYY')
ORDER BY 1, 2;

-- zad 5
SELECT
  P.NAME,
  TO_CHAR(O.ORDERDATE, 'MM-YYYY')        AS CZAS,
  SUM(OI.QUANTITY * (B.RETAIL - B.COST)) AS ZYSK,
  ROUND(AVG(SUM(OI.QUANTITY * (B.RETAIL - B.COST)))
        OVER (
          PARTITION BY P.NAME --zamiast unbounded moze byc 1, 2,3,4 itp- -- and current row mozna  zamienic na preceeding---
          ORDER BY TO_CHAR(O.ORDERDATE, 'MM-YYYY') ASC ROWS BETWEEN 2 PRECEDING AND 1 FOLLOWING ),
        2)                               AS SUMA_NARASTAJACA
FROM PUBLISHER P
  JOIN BOOKS B ON P.PUBID = B.PUBID
  JOIN ORDERITEMS OI ON B.ISBN = OI.ISBN
  JOIN ORDERS O ON OI.ORDER# = O.ORDER#
GROUP BY P.NAME, TO_CHAR(O.ORDERDATE, 'MM-YYYY')
ORDER BY 1, 2;

--zad 6
SELECT
  P.NAME,
  TO_CHAR(O.ORDERDATE, 'MM-YYYY')                                                                     AS CZAS,
  SUM(OI.QUANTITY * (B.RETAIL - B.COST))                                                              AS ZYSK,
  ROUND(AVG(SUM(OI.QUANTITY * (B.RETAIL - B.COST)))
        OVER (
          PARTITION BY P.NAME --zamiast unbounded moze byc 1, 2,3,4 itp- -- and current row mozna  zamienic na preceeding---
          ORDER BY TO_CHAR(O.ORDERDATE, 'MM-YYYY') ASC ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING ), 2) AS SUMA_KROCZACA
FROM PUBLISHER P
  JOIN BOOKS B ON P.PUBID = B.PUBID
  JOIN ORDERITEMS OI ON B.ISBN = OI.ISBN
  JOIN ORDERS O ON OI.ORDER# = O.ORDER#
GROUP BY P.NAME, TO_CHAR(O.ORDERDATE, 'MM-YYYY')
ORDER BY 1, 2;

--zad 7
SELECT
  B.CATEGORY,
  TO_CHAR(O.ORDERDATE, 'MON')                         AS CZAS,
  SUM(OI.QUANTITY)                                    AS SPRZEDANE,
  ROUND(AVG(SUM(OI.QUANTITY))
        OVER (
          PARTITION BY TO_CHAR(O.ORDERDATE, 'MON') )) AS SREDNIA
FROM BOOKS B
  JOIN ORDERITEMS OI ON B.ISBN = OI.ISBN
  JOIN ORDERS O ON OI.ORDER# = O.ORDER#
WHERE EXTRACT(YEAR FROM O.ORDERDATE) = 2005
GROUP BY B.CATEGORY, TO_CHAR(O.ORDERDATE, 'MON')
ORDER BY 2, 1;

--zad 8
SELECT
  B.CATEGORY,
  SUM(OI.QUANTITY) AS SPRZEDANE,
  ROUND(RATIO_TO_REPORT(SUM(OI.QUANTITY))
        OVER (), 3) * 100
FROM BOOKS B
  JOIN ORDERITEMS OI ON B.ISBN = OI.ISBN
  JOIN ORDERS O ON OI.ORDER# = O.ORDER#
GROUP BY B.CATEGORY, TO_CHAR(O.ORDERDATE, 'MON')
ORDER BY 2, 1;
